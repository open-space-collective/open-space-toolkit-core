<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="_array_8tpp" kind="file" language="C++">
    <compoundname>Array.tpp</compoundname>
    <includedby refid="_array_8hpp" local="no">include/OpenSpaceToolkit/Core/Container/Array.hpp</includedby>
    <invincdepgraph>
      <node id="8">
        <label>include/OpenSpaceToolkit/Core/Container/Table/Row.hpp</label>
        <link refid="_row_8hpp"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>include/OpenSpaceToolkit/Core/Container/Table/Cell.hpp</label>
        <link refid="_cell_8hpp"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>src/OpenSpaceToolkit/Core/Container/Array.tpp</label>
        <link refid="_array_8tpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="16">
        <label>include/OpenSpaceToolkit/Core/Logger/Sink/Sink.hpp</label>
        <link refid="_sink_2_sink_8hpp"/>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="20">
        <label>include/OpenSpaceToolkit/Core/Logger/Source/Source.hpp</label>
        <link refid="_source_2_source_8hpp"/>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>src/OpenSpaceToolkit/Core/Container/Table/Row.cpp</label>
        <link refid="_row_8cpp"/>
      </node>
      <node id="11">
        <label>src/OpenSpaceToolkit/Core/Container/Table.cpp</label>
        <link refid="_table_8cpp"/>
      </node>
      <node id="18">
        <label>include/OpenSpaceToolkit/Core/Logger/Sink.hpp</label>
        <link refid="_sink_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>include/OpenSpaceToolkit/Core/Container/Dictionary.hpp</label>
        <link refid="_dictionary_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="23">
        <label>src/OpenSpaceToolkit/Core/Type/String.cpp</label>
        <link refid="_string_8cpp"/>
      </node>
      <node id="3">
        <label>include/OpenSpaceToolkit/Core/Container/Object.hpp</label>
        <link refid="_object_8hpp"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>include/OpenSpaceToolkit/Core/Container/Array.hpp</label>
        <link refid="_array_8hpp"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="23" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>src/OpenSpaceToolkit/Core/Container/Dictionary.cpp</label>
        <link refid="_dictionary_8cpp"/>
      </node>
      <node id="22">
        <label>include/OpenSpaceToolkit/Core/Logger/Pump.hpp</label>
        <link refid="_pump_8hpp"/>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>src/OpenSpaceToolkit/Core/Container/Object.cpp</label>
        <link refid="_object_8cpp"/>
      </node>
      <node id="15">
        <label>src/OpenSpaceToolkit/Core/FileSystem/File.cpp</label>
        <link refid="_file_8cpp"/>
      </node>
      <node id="9">
        <label>include/OpenSpaceToolkit/Core/Container/Table.hpp</label>
        <link refid="_table_8hpp"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>include/OpenSpaceToolkit/Core/FileSystem/Directory.hpp</label>
        <link refid="_directory_8hpp"/>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>include/OpenSpaceToolkit/Core/FileSystem.hpp</label>
        <link refid="_file_system_8hpp"/>
      </node>
      <node id="21">
        <label>include/OpenSpaceToolkit/Core/Logger/Source.hpp</label>
        <link refid="_source_8hpp"/>
        <childnode refid="22" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>include/OpenSpaceToolkit/Core/Logger/Sink/Console.hpp</label>
        <link refid="_console_8hpp"/>
      </node>
      <node id="19">
        <label>include/OpenSpaceToolkit/Core/Logger.hpp</label>
        <link refid="_logger_8hpp"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>src/OpenSpaceToolkit/Core/FileSystem/Directory.cpp</label>
        <link refid="_directory_8cpp"/>
      </node>
    </invincdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">///<sp/>Apache<sp/>License<sp/>2.0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;algorithm&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;OpenSpaceToolkit/Core/Error.hpp&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;OpenSpaceToolkit/Core/Utility.hpp&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">namespace<sp/>ostk</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>core</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">namespace<sp/>container</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array(const<sp/>Size&amp;<sp/>aSize,<sp/>const<sp/>T&amp;<sp/>anElement)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::vector&lt;T&gt;(aSize,<sp/>anElement)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array(const<sp/>std::vector&lt;T&gt;&amp;<sp/>aVector)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::vector&lt;T&gt;(aVector)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array(std::initializer_list&lt;T&gt;<sp/>aList)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::vector&lt;T&gt;(aList)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array(std::vector&lt;T&gt;&amp;&amp;<sp/>aVector)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::vector&lt;T&gt;(std::move(aVector))</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>InputIterator&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;::Array(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InputIterator<sp/>aFirstIterator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>InputIterator<sp/>aLastIterator,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>typename<sp/>std::vector&lt;T&gt;::allocator_type&amp;<sp/>anAllocator</highlight></codeline>
<codeline><highlight class="normal">)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/>std::vector&lt;T&gt;(aFirstIterator,<sp/>aLastIterator,<sp/>anAllocator)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>Array&lt;T&gt;::operator+(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>array(*this);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>array.mergeWith(anArray);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>array;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>U&gt;</highlight></codeline>
<codeline><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>anOutputStream,<sp/>const<sp/>Array&lt;U&gt;&amp;<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ostk::core::utils::Print::Header(anOutputStream,<sp/>&quot;Array&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>element<sp/>:<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anOutputStream<sp/>&lt;&lt;<sp/>element<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ostk::core::utils::Print::Footer(anOutputStream);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>anOutputStream;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>T&amp;<sp/>Array&lt;T&gt;::accessFirst()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;isEmpty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>is<sp/>empty.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;front();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">const<sp/>T&amp;<sp/>Array&lt;T&gt;::accessLast()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;isEmpty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>is<sp/>empty.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;back();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>Array&lt;T&gt;::isEmpty()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;empty();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>Array&lt;T&gt;::contains(const<sp/>T&amp;<sp/>anElement)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::find(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>anElement)<sp/>!=<sp/>this-&gt;end();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>Array&lt;T&gt;::isNear(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray,<sp/>const<sp/>T&amp;<sp/>aTolerance)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;getSize()<sp/>!=<sp/>anArray.getSize())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto<sp/>elementTuple<sp/>:<sp/>ostk::core::container::iterator::Zip(*this,<sp/>anArray))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!std::get&lt;0&gt;(elementTuple).isNear(std::get&lt;1&gt;(elementTuple),<sp/>aTolerance))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>Array&lt;T&gt;::isNear(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray,<sp/>const<sp/>std::function&lt;bool(const<sp/>T&amp;,<sp/>const<sp/>T&amp;)&gt;&amp;<sp/>aComparator)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;getSize()<sp/>!=<sp/>anArray.getSize())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto<sp/>elementTuple<sp/>:<sp/>ostk::core::container::iterator::Zip(*this,<sp/>anArray))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(!aComparator(std::get&lt;0&gt;(elementTuple),<sp/>std::get&lt;1&gt;(elementTuple)))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>false;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>true;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Size<sp/>Array&lt;T&gt;::getSize()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;size();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Index<sp/>Array&lt;T&gt;::getIndexOf(const<sp/>T&amp;<sp/>anElement)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::const_iterator<sp/>arrayIt<sp/>=<sp/>std::find(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>anElement);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(arrayIt<sp/>==<sp/>this-&gt;end())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>does<sp/>not<sp/>contain<sp/>element.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::distance(this-&gt;begin(),<sp/>arrayIt);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">typename<sp/>std::enable_if&lt;ostk::core::type::HasToString&lt;T&gt;::value,<sp/>type::String&gt;::type<sp/>extractString(const<sp/>T&amp;<sp/>aType)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>aType.toString();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">typename<sp/>std::enable_if&lt;std::is_same&lt;T,<sp/>type::String&gt;::value,<sp/>type::String&gt;::type<sp/>extractString(const<sp/>T&amp;<sp/>aType)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>&quot;\&quot;&quot;<sp/>+<sp/>aType<sp/>+<sp/>&quot;\&quot;&quot;;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>template<sp/>&lt;typename<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>typename<sp/>std::enable_if&lt;!ostk::core::type::HasToString&lt;T&gt;::value,<sp/>type::String&gt;::type<sp/>extractString<sp/>(const<sp/>T&amp;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>aType)</highlight></codeline>
<codeline><highlight class="normal">//<sp/>{</highlight></codeline>
<codeline><highlight class="normal">//<sp/><sp/><sp/><sp/><sp/>return<sp/>aType<sp/>;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">type::String<sp/>Array&lt;T&gt;::toString()<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>type::String<sp/>string<sp/>=<sp/>&quot;[&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>item<sp/>:<sp/>(*this))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>//<sp/>string<sp/>+=<sp/>item.toString()<sp/>;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>+=<sp/>extractString(item);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(&amp;item<sp/>!=<sp/>&amp;(this-&gt;back()))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string<sp/>+=<sp/>&quot;,<sp/>&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>string<sp/>+=<sp/>&quot;]&quot;;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>string;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">typename<sp/>Array&lt;T&gt;::ConstIterator<sp/>Array&lt;T&gt;::find(const<sp/>T&amp;<sp/>anElement)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::find(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>anElement);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>U&gt;</highlight></codeline>
<codeline><highlight class="normal">U<sp/>foldLeft(const<sp/>std::vector&lt;T&gt;&amp;<sp/>data,<sp/>const<sp/>U&amp;<sp/>initialValue,<sp/>const<sp/>std::function&lt;U(U,<sp/>T)&gt;&amp;<sp/>aFoldFunction)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>U<sp/>accumulator<sp/>=<sp/>initialValue;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>typename<sp/>Array&lt;T&gt;::ConstIterator<sp/>end<sp/>=<sp/>data.cend();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(typename<sp/>Array&lt;T&gt;::ConstIterator<sp/>it<sp/>=<sp/>data.cbegin();<sp/>it<sp/>!=<sp/>end;<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulator<sp/>=<sp/>aFoldFunction(accumulator,<sp/>*it);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>accumulator;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>U&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;U&gt;<sp/>Array&lt;T&gt;::map(const<sp/>std::function&lt;U(T)&gt;<sp/>aMappingFunction)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;U&gt;<sp/>result<sp/>=<sp/>Array&lt;U&gt;::Empty();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>result.reserve(this-&gt;getSize());</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>foldLeft&lt;T,<sp/>Array&lt;U&gt;&amp;&gt;(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*this),</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[aMappingFunction](Array&lt;U&gt;&amp;<sp/>anArray,<sp/>T<sp/>aValue)<sp/>-&gt;<sp/>Array&lt;U&gt;&amp;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>anArray.add(aMappingFunction(aValue));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>anArray;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>result;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">T<sp/>Array&lt;T&gt;::reduce(const<sp/>std::function&lt;T(T,<sp/>T)&gt;&amp;<sp/>aReduceFunction)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;isEmpty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>is<sp/>empty.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>typename<sp/>Array&lt;T&gt;::ConstIterator<sp/>it<sp/>=<sp/>this-&gt;cbegin();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>const<sp/>typename<sp/>Array&lt;T&gt;::ConstIterator<sp/>end<sp/>=<sp/>this-&gt;cend();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>accumulator<sp/>=<sp/>*it;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>++it;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(;<sp/>it<sp/>!=<sp/>end;<sp/>++it)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>accumulator<sp/>=<sp/>aReduceFunction(accumulator,<sp/>*it);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>accumulator;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;const<sp/>T*&gt;<sp/>Array&lt;T&gt;::accessWhere(const<sp/>std::function&lt;bool(const<sp/>T&amp;)&gt;&amp;<sp/>aPredicate)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;const<sp/>T*&gt;<sp/>array<sp/>=<sp/>Array&lt;const<sp/>T*&gt;::Empty();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>item<sp/>:<sp/>(*this))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>if<sp/>(aPredicate(item))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array.add(&amp;item);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>array;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>Array&lt;T&gt;::getWhere(const<sp/>std::function&lt;bool(const<sp/>T&amp;)&gt;&amp;<sp/>aPredicate)<sp/>const</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>Array&lt;T&gt;<sp/>array<sp/>=<sp/>Array&lt;T&gt;::Empty();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::copy_if(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>std::back_inserter(array),<sp/>aPredicate);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>array;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">T&amp;<sp/>Array&lt;T&gt;::accessFirst()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;isEmpty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>is<sp/>empty.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;front();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">T&amp;<sp/>Array&lt;T&gt;::accessLast()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>if<sp/>(this-&gt;isEmpty())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>throw<sp/>ostk::core::error::RuntimeError(&quot;Array<sp/>is<sp/>empty.&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>this-&gt;back();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::add(const<sp/>T&amp;<sp/>anElement)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;emplace_back(anElement);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::remove(const<sp/>T&amp;<sp/>anElement)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;erase(std::remove(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>anElement),<sp/>this-&gt;end());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::add(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;insert(this-&gt;end(),<sp/>anArray.begin(),<sp/>anArray.end());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::remove(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>for<sp/>(const<sp/>auto&amp;<sp/>element<sp/>:<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;erase(std::remove(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>element),<sp/>this-&gt;end());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::mergeWith(const<sp/>Array&lt;T&gt;&amp;<sp/>anArray)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;insert(this-&gt;end(),<sp/>anArray.begin(),<sp/>anArray.end());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">void<sp/>Array&lt;T&gt;::removeWhere(const<sp/>std::function&lt;bool(const<sp/>T&amp;)&gt;&amp;<sp/>aPredicate)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;erase(std::remove_if(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>aPredicate),<sp/>this-&gt;end());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">typename<sp/>Array&lt;T&gt;::Iterator<sp/>Array&lt;T&gt;::find(const<sp/>T&amp;<sp/>anElement)</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::find(this-&gt;begin(),<sp/>this-&gt;end(),<sp/>anElement);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">template<sp/>&lt;class<sp/>T&gt;</highlight></codeline>
<codeline><highlight class="normal">Array&lt;T&gt;<sp/>Array&lt;T&gt;::Empty()</highlight></codeline>
<codeline><highlight class="normal">{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>return<sp/>std::move(std::vector&lt;T&gt;());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>container</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>core</highlight></codeline>
<codeline><highlight class="normal">}<sp/><sp/>//<sp/>namespace<sp/>ostk</highlight></codeline>
    </programlisting>
    <location file="src/OpenSpaceToolkit/Core/Container/Array.tpp"/>
  </compounddef>
</doxygen>
